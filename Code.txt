Исходный код Django-сервиса:
users/models.py:
```
from django.contrib.auth.models import AbstractUser
from django.db import models


class User(AbstractUser):
    pass


class FriendRequest(models.Model):
    from_user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='sent_requests')
    to_user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='received_requests')
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        unique_together = ('from_user', 'to_user')


class Friendship(models.Model):
    user1 = models.ForeignKey(User, on_delete=models.CASCADE, related_name='friendships')
    user2 = models.ForeignKey(User, on_delete=models.CASCADE, related_name='+')

    class Meta:
        unique_together = ('user1', 'user2')
```

users/views.py:
```
from rest_framework import generics, status
from rest_framework.response import Response

from .models import User, FriendRequest, Friendship
from .serializers import UserSerializer, FriendRequestSerializer


class UserCreateView(generics.CreateAPIView):
    serializer_class = UserSerializer


class FriendRequestCreateView(generics.CreateAPIView):
    serializer_class = FriendRequestSerializer

    def perform_create(self, serializer):
        friend_id = serializer.validated_data['friend_id']
        from_user = self.request.user
        to_user = User.objects.get(id=friend_id)

        # Check if friend request already exists
        if FriendRequest.objects.filter(from_user=from_user, to_user=to_user).exists():
            return Response({'detail': 'Friend request already exists'}, status=status.HTTP_400_BAD_REQUEST)

        # Check if friendship already exists
        if Friendship.objects.filter(user1=from_user, user2=to_user).exists():
            return Response({'detail': 'Users are already friends'}, status=status.HTTP_400_BAD_REQUEST)

        # Check if friend request was sent by the other user
        if FriendRequest.objects.filter(from_user=to_user, to_user=from_user).exists():
            Friendship.objects.create(user1=from_user, user2=to_user)
            FriendRequest.objects.filter(from_user=to_user, to_user=from_user).delete()
            return Response({'detail': 'Friendship created'}, status=status.HTTP_201_CREATED)

        serializer.save(from_user=from_user)


class FriendRequestListView(generics.ListAPIView):
    serializer_class = FriendRequestSerializer

    def get_queryset(self):
        return FriendRequest.objects.filter(to_user=self.request.user)


class FriendRequestUpdateView(generics.UpdateAPIView):
    serializer_class = FriendRequestSerializer
    lookup_url_kwarg = 'request_id'

    def get_queryset(self):
        return FriendRequest.objects.filter(to_user=self.request.user)

    def perform_update(self, serializer):
        status = serializer.validated_data['status']
        friend_request = self.get_object()

        if status == 'accepted':
            Friendship.objects.create(user1=friend_request.from_user, user2=friend_request.to_user)
            friend_request.delete()
        else:
            friend_request.delete()


class FriendRequestDeleteView(generics.DestroyAPIView):
    lookup_url_kwarg = 'request_id'

    def get_queryset(self):
        return FriendRequest.objects.filter(to_user=self.request.user)


class FriendListView(generics.ListAPIView):
    serializer_class = UserSerializer

    def get_queryset(self):
        friends = Friendship.objects.filter(user1=self.request.user) | Friendship.objects.filter(user2=self.request.user)
        return User.objects.filter(id__in=friends.values_list('user1_id', flat=True) | friends.values_list('user2_id', flat=True))


class FriendDeleteView(generics.DestroyAPIView):
    lookup_url_kwarg = 'friend_id'

    def get_queryset(self):
        friends = Friendship.objects.filter(user1=self.request.user) | Friendship.objects.filter(user2=self.request.user)
        friend_ids = friends.values_list('user1_id', flat=True) | friends.values_list('user2_id', flat=True)
        return User.objects.filter(id__in=friend_ids)

    def p

Edya - Нейросеть, [09.05.2023 12:11]
erform_destroy(self, instance):
        Friendship.objects.filter(user1=self.request.user, user2=instance).delete()
        Friendship.objects.filter(user1=instance, user2=self.request.user).delete()


class FriendStatusView(generics.RetrieveAPIView):
    serializer_class = FriendRequestSerializer
    lookup_url_kwarg = 'friend_id'

    def get_queryset(self):
        friend_id = self.kwargs['friend_id']
        friend = User.objects.filter(id=friend_id).first()

        if friend is None:
            return FriendRequest.objects.none()

        friend_request = FriendRequest.objects.filter(from_user=self.request.user, to_user=friend).first()

        if friend_request is not None:
            return FriendRequest.objects.filter(from_user=self.request.user, to_user=friend)

        friend_request = FriendRequest.objects.filter(from_user=friend, to_user=self.request.user).first()

        if friend_request is not None:
            return FriendRequest.objects.filter(from_user=friend, to_user=self.request.user)

        if Friendship.objects.filter(user1=self.request.user, user2=friend).exists() or Friendship.objects.filter(user1=friend, user2=self.request.user).exists():
            return FriendRequest.objects.none()

        return FriendRequest.objects.none()
```

users/serializers.py:
```
from rest_framework import serializers

from .models import User, FriendRequest


class UserSerializer(serializers.ModelSerializer):
    class Meta:
        model = User
        fields = ('id', 'username')


class FriendRequestSerializer(serializers.ModelSerializer):
    from_user = UserSerializer(read_only=True)
    to_user = UserSerializer(read_only=True)

    class Meta:
        model = FriendRequest
        fields = ('id', 'from_user', 'to_user', 'created_at', 'status')
        read_only_fields = ('id', 'from_user', 'to_user', 'created_at')

    def validate(self, attrs):
        if attrs['to_user'] == self.context['request'].user:
            raise serializers.ValidationError('Cannot send friend request to yourself')
        return attrs
```

users/urls.py:
```
from django.urls import path
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView

from .views import (
    UserCreateView,
    FriendRequestCreateView,
    FriendRequestListView,
    FriendRequestUpdateView,
    FriendRequestDeleteView,
    FriendListView,
    FriendDeleteView,
    FriendStatusView,
)


urlpatterns = [
    path('register/', UserCreateView.as_view(), name='user-create'),
    path('login/', TokenObtainPairView.as_view(), name='token-obtain-pair'),
    path('refresh/', TokenRefreshView.as_view(), name='token-refresh'),
    path('friend-requests/', FriendRequestListView.as_view(), name='friend-request-list'),
    path('friend-requests/<int:request_id>/', FriendRequestUpdateView.as_view(), name='friend-request-update'),
    path('friend-requests/<int:request_id>/delete/', FriendRequestDeleteView.as_view(), name='friend-request-delete'),
    path('friends/', FriendListView.as_view(), name='friend-list'),
    path('friends/<int:friend_id>/', FriendDeleteView.as_view
